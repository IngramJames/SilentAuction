@model SilentAuction.Models.ConfigurationParameter

@{
    ViewBag.Title = SilentAuction.Resources.TextStrings.EditParameter;
    
}

<h2>@ViewBag.Title</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.Key)

        <div class="form-group">
            @{ string readableName = ViewBag.Parameter.ReadableName;
               @Html.Label(readableName, htmlAttributes: new { @class = "control-label col-md-2" });
            }
            
            <div class="col-md-10">
                
                @{ switch ((SilentAuction.Models.ParameterType)ViewBag.Parameter.Type)
                   {
                       case SilentAuction.Models.ParameterType.Text:
                           @Html.EditorFor(model => model.SettingAsString, new { htmlAttributes = new { @class = "form-control", autofocus = "autofocus" } });
                           @Html.ValidationMessageFor(model => model.SettingAsString, "", new { @class = "text-danger" });
                           break;

                       case SilentAuction.Models.ParameterType.Boolean:
                           @Html.EditorFor(model => model.SettingAsBool);
                           @Html.ValidationMessageFor(model => model.SettingAsBool, "", new { @class = "text-danger" });
                           break;

                       case SilentAuction.Models.ParameterType.Integer:
                           @Html.EditorFor(model => model.SettingAsInt, new { htmlAttributes = new { @class = "form-control", autofocus = "autofocus" } });
                           @Html.ValidationMessageFor(model => model.SettingAsInt, "", new { @class = "text-danger" });
                        break;

                       case SilentAuction.Models.ParameterType.Currency:
                           @Html.EditorFor(model => model.SettingAsDecimal, new { htmlAttributes = new { @class = "form-control", autofocus = "autofocus" } });
                           @Html.ValidationMessageFor(model => model.SettingAsDecimal, "", new { @class = "text-danger" });
                        break;

                        case SilentAuction.Models.ParameterType.Double:
                            @Html.EditorFor(model => model.SettingAsDouble, new { htmlAttributes = new { @class = "form-control", autofocus = "autofocus" } });
                            @Html.ValidationMessageFor(model => model.SettingAsDouble, "", new { @class = "text-danger" });
                            break;

                        case SilentAuction.Models.ParameterType.Enumeration:
                            // TODO: Combo
                            @Html.EditorFor(model => model.SettingAsInt, new { htmlAttributes = new { @class = "form-control", autofocus = "autofocus" } });
                            @Html.ValidationMessageFor(model => model.SettingAsInt, "", new { @class = "text-danger" });
                            break;
                        default:
                            <text>Cannot find parameter type</text>
                            break;

                   }
                }

            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
