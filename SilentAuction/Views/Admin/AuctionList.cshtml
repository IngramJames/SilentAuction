@model IEnumerable<SilentAuction.Models.Auction>
@using SilentAuction.Models
@using SilentAuction.Resources

@{
    ViewBag.Title = SilentAuction.Resources.TextStrings.AuctionConfiguration;
}

<h2>@ViewBag.Title</h2>

<div class="row">
    <div class="col-sm-3">
        <a href="@Url.Action("AuctionCreate", "Admin")" class="btn btn-primary btn-block glyphicon glyphicon-plus">&nbsp;@SilentAuction.Resources.TextStrings.AuctionCreate</a>
    </div>
</div>

<table class="table">
    <tr>
        <th width:auto; white-space: nowrap;"></th>
        <th>@TextStrings.Status</th> 
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Description)
        </th>
    </tr>

@foreach (var item in Model)
{
    <tr>
        <td style="width:auto;white-space: nowrap;">
            @{
                // only edit pending auctions
                bool editEnabled = true; // item.Status == AuctionStatus.Pending;

                // only start pending auctions
                bool startEnabled = item.Status == AuctionStatus.Pending || item.Status == AuctionStatus.Paused;

                // only close running auctions
                bool closeEnabled = item.Status == AuctionStatus.Running || item.Status == AuctionStatus.Paused;

                // only pause running auctions
                bool pauseEnabled = item.Status == AuctionStatus.Running;

                bool reopenEnabled = item.Status == AuctionStatus.Closed;

                string startText = TextStrings.AuctionStartLink;
                if (item.Status == AuctionStatus.Paused)
                {
                    startText = TextStrings.AuctionResumeLink;
                }

                // HAVE to pass in the correct type or ActionLink goes bonnkers and spits out Dictionary.ToString()
                // So create and cast it here.
                RouteValueDictionary route = new RouteValueDictionary(new { id = item.AuctionId });
            }
            @Html.ActionLink(" " + @TextStrings.Edit, "AuctionEdit", "Admin", route, htmlAttributes: GetLinkAttributes(editEnabled, "btn btn-info glyphicon glyphicon-edit"))
            @Html.ActionLink(" " + startText, "AuctionStart", "Admin", route, htmlAttributes: GetLinkAttributes(startEnabled, "btn btn-success glyphicon glyphicon-play"))
            @Html.ActionLink(" " + @TextStrings.AuctionPauseLink, "AuctionPause", "Admin", route, htmlAttributes: GetLinkAttributes(pauseEnabled, "btn btn-warning glyphicon glyphicon-pause"))
            @Html.ActionLink(" " + @TextStrings.AuctionCloseLink, "AuctionClose", "Admin", route, htmlAttributes: GetLinkAttributes(closeEnabled, "btn btn-danger glyphicon glyphicon-stop"))
            @Html.ActionLink(" " + @TextStrings.AuctionReopenLink, "AuctionReopen", "Admin", route, htmlAttributes: GetLinkAttributes(reopenEnabled, "btn btn-primary glyphicon glyphicon-open"))
        </td>
        <td>
            <img src="@item.StatusIcon(20)" /> &nbsp; @item.StatusText
        </td>

        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Description)
        </td>
    </tr>
}


@functions {
    public Dictionary<string, object> GetLinkAttributes(bool enabled, string classText)
    {
        Dictionary<string, object> attrs = new Dictionary<string, object>();
        if(!enabled)
        {
            attrs.Add("disabled", "disabled");
        }
        attrs.Add("class", classText);
        return attrs;
    }
}

</table>
