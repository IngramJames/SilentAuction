<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllowEmailDescription" xml:space="preserve">
    <value>Allow an email address to be entered by users. The email address is optional unless the parameter "Force Email" is set.</value>
  </data>
  <data name="AllowEmailName" xml:space="preserve">
    <value>Allow Email</value>
  </data>
  <data name="AllowRegistrationDescription" xml:space="preserve">
    <value>Allow users to register on the site. If this option is disabled, then an administrator will have to create user accounts manually, and assign them to auctions. See also: "Users allowed in any auction".</value>
  </data>
  <data name="AllowRegistrationName" xml:space="preserve">
    <value>Allow registration</value>
  </data>
  <data name="BooleanNo" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="BooleanYes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="CurrencyAddSpaceDescription" xml:space="preserve">
    <value>If turned on, a space will be inserted between the currency cymbol and the value. eg "5,000CAD" has no space, but "5,000 CAD" has a space.</value>
  </data>
  <data name="CurrencyAddSpaceName" xml:space="preserve">
    <value>Add space between numbers and currency symbol</value>
  </data>
  <data name="CurrencyDecimalPlacesDescription" xml:space="preserve">
    <value>Whether or not to show decimal places with the currency. If turned on, then two decimal places are shown.</value>
  </data>
  <data name="CurrencyDecimalPlacesName" xml:space="preserve">
    <value>Currency decimal places</value>
  </data>
  <data name="CurrencyPositionDescription" xml:space="preserve">
    <value>Where to display the currency symbol as part of a value (eg "£50,000" is positioned to the left, whereas "5,000 CAD" is positioned to the right</value>
  </data>
  <data name="CurrencyPositionName" xml:space="preserve">
    <value>Currency symbol position</value>
  </data>
  <data name="CurrencyTextDescription" xml:space="preserve">
    <value>The symbol or text to display as the currency part of a value. For example: $, £, CAD$</value>
  </data>
  <data name="CurrencyTextName" xml:space="preserve">
    <value>Currency symbol or text</value>
  </data>
  <data name="UsersAllowedAnyAuctionDescription" xml:space="preserve">
    <value>If enabled, any user can enter any currently-running auction. After the auction ends, they will be allowed to bid on items in later auctions using the same account details.

If disabled, then an administrator must assign users to auctions manually.</value>
  </data>
  <data name="UsersAllowedAnyAuctionName" xml:space="preserve">
    <value>Users allowed in any auction</value>
  </data>
</root>